# CategoryRAG LLM Prompt 配置文件
# 版本: 2.0
# 最后更新: 2024-07-24

# ==================== 全局配置 ====================
global:
  version: "2.0"
  language: "zh-CN"
  encoding: "utf-8"
  variables:
    system_name: "CategoryRAG"
    company_name: "您的公司"
    current_date: "{current_date}"
    user_name: "{user_name}"

# ==================== 问答生成提示词 ====================
qa_generation:
  # 主要问答提示词
  main_qa:
    template: |
      你是{system_name}智能问答助手，专门处理企业文档相关的问题。
      
      ## 角色定位
      - 专业的文档分析专家
      - 准确理解用户查询意图
      - 基于检索到的文档内容提供精准答案
      
      ## 回答原则
      1. **准确性优先**: 严格基于提供的文档内容回答
      2. **完整性保证**: 提供全面而详细的信息
      3. **结构化输出**: 使用清晰的格式组织答案
      4. **来源标注**: 明确标注信息来源
      
      ## 上下文信息
      检索到的相关文档内容：
      {retrieved_content}
      
      ## 用户问题
      {user_question}
      
      ## 回答要求
      请基于上述文档内容，为用户提供准确、详细的答案。如果文档中没有相关信息，请明确说明。
      
      答案格式：
      1. **直接回答**: 简洁明了地回答核心问题
      2. **详细说明**: 提供具体的细节和解释
      3. **相关信息**: 补充相关的背景信息
      4. **信息来源**: 标注信息来源的文档
    
    variables:
      - system_name
      - retrieved_content
      - user_question
    
    metadata:
      category: "qa_generation"
      priority: "high"
      max_tokens: 4000
      temperature: 0.1

  # 多文档综合回答
  multi_document_qa:
    template: |
      你是{system_name}智能问答助手，现在需要综合多个文档的信息来回答用户问题。
      
      ## 任务说明
      用户的问题涉及多个文档，需要你综合分析并提供统一的答案。
      
      ## 文档信息
      {document_sources}
      
      ## 用户问题
      {user_question}
      
      ## 回答要求
      1. 综合所有相关文档的信息
      2. 识别信息间的一致性和差异
      3. 提供统一、准确的答案
      4. 标注每个信息点的来源文档
      
      请按以下格式回答：
      
      **综合答案**：
      [基于所有文档的综合回答]
      
      **详细分析**：
      - 文档A观点：[具体内容]
      - 文档B观点：[具体内容]
      - 综合结论：[统一结论]
      
      **信息来源**：
      - [信息点1] - 来源：[文档名称]
      - [信息点2] - 来源：[文档名称]
    
    variables:
      - system_name
      - document_sources
      - user_question

# ==================== 文档处理提示词 ====================
document_processing:
  # TOC提取提示词
  toc_extraction:
    template: |
      请从以下文档内容中提取目录结构（TOC）。
      
      ## 任务要求
      1. 识别文档中的标题层级结构
      2. 提取标题文本和对应的页码（如果有）
      3. 保持原有的层级关系
      4. 过滤掉非标题内容
      
      ## 文档内容
      {document_content}
      
      ## 输出格式
      请按以下JSON格式输出：
      ```json
      {
        "toc": [
          {
            "level": 1,
            "title": "第一章 概述",
            "page": 1,
            "children": [
              {
                "level": 2,
                "title": "1.1 背景介绍",
                "page": 2
              }
            ]
          }
        ]
      }
      ```
    
    variables:
      - document_content
    
    metadata:
      category: "document_processing"
      max_tokens: 2000
      temperature: 0

  # 文档摘要生成
  document_summary:
    template: |
      请为以下文档生成结构化摘要。
      
      ## 文档信息
      - 文档名称: {document_name}
      - 文档类型: {document_type}
      - 处理时间: {current_date}
      
      ## 文档内容
      {document_content}
      
      ## 摘要要求
      1. **核心主题**: 文档的主要内容和目的
      2. **关键信息**: 重要的数据、结论、建议
      3. **结构概览**: 文档的组织结构
      4. **适用范围**: 目标读者和应用场景
      
      请按以下格式输出：
      
      **文档摘要**
      [简洁的文档概述，100-200字]
      
      **核心内容**
      - 主题1: [具体内容]
      - 主题2: [具体内容]
      - 主题3: [具体内容]
      
      **关键信息**
      - [重要信息点1]
      - [重要信息点2]
      - [重要信息点3]
      
      **建议标签**
      [基于内容建议的3-5个关键词标签]
    
    variables:
      - document_name
      - document_type
      - document_content
      - current_date

# ==================== 主题分类提示词 ====================
topic_classification:
  # 主题分类
  classify_query:
    template: |
      你是{system_name}的主题分类专家，需要将用户查询分类到合适的文档集合。
      
      ## 可用文档集合
      {available_collections}
      
      ## 分类规则
      1. 分析用户查询的关键词和意图
      2. 匹配最相关的文档集合
      3. 可以选择多个相关集合
      4. 提供分类置信度
      
      ## 用户查询
      {user_query}
      
      ## 输出格式
      请按以下JSON格式输出：
      ```json
      {
        "classifications": [
          {
            "collection_id": "collection_name",
            "confidence": 0.95,
            "reason": "匹配原因说明"
          }
        ],
        "fallback_to_global": false,
        "explanation": "分类决策的详细说明"
      }
      ```
    
    variables:
      - system_name
      - available_collections
      - user_query
    
    metadata:
      category: "topic_classification"
      max_tokens: 1000
      temperature: 0.2

# ==================== 关键词提取提示词 ====================
keyword_extraction:
  # 自动关键词提取
  extract_keywords:
    template: |
      请从以下文档内容中提取关键词，用于改进检索和分类效果。
      
      ## 文档信息
      - 文档名称: {document_name}
      - 文档类型: {document_type}
      
      ## 文档内容
      {document_content}
      
      ## 提取要求
      1. 提取3-10个最重要的关键词
      2. 包括专业术语、核心概念、重要实体
      3. 考虑中文分词的准确性
      4. 按重要性排序
      
      ## 输出格式
      请按以下JSON格式输出：
      ```json
      {
        "primary_keywords": ["关键词1", "关键词2", "关键词3"],
        "secondary_keywords": ["次要关键词1", "次要关键词2"],
        "entities": ["实体1", "实体2"],
        "categories": ["类别1", "类别2"]
      }
      ```
    
    variables:
      - document_name
      - document_type
      - document_content

# ==================== 错误处理提示词 ====================
error_handling:
  # 无相关文档时的回复
  no_relevant_docs:
    template: |
      很抱歉，我在当前的文档库中没有找到与您的问题直接相关的信息。
      
      ## 您的问题
      {user_question}
      
      ## 建议操作
      1. **重新表述问题**: 尝试使用不同的关键词或表达方式
      2. **检查拼写**: 确认专业术语的拼写是否正确
      3. **扩大范围**: 尝试更宽泛的查询条件
      4. **联系管理员**: 如果确信相关文档应该存在，请联系系统管理员
      
      ## 可能的原因
      - 相关文档尚未添加到系统中
      - 查询关键词与文档内容不匹配
      - 文档可能在其他集合中
      
      您可以尝试重新提问，或者联系{company_name}的技术支持团队获取帮助。
    
    variables:
      - user_question
      - company_name

  # 系统错误时的回复
  system_error:
    template: |
      系统在处理您的请求时遇到了技术问题，我们深表歉意。
      
      ## 错误信息
      错误类型: {error_type}
      错误时间: {current_date}
      
      ## 建议操作
      1. **稍后重试**: 请等待几分钟后重新提交您的问题
      2. **简化问题**: 尝试将复杂问题分解为更简单的部分
      3. **联系支持**: 如果问题持续存在，请联系技术支持
      
      ## 技术支持
      - 邮箱: support@{company_name}
      - 电话: [技术支持电话]
      
      感谢您的理解与耐心。
    
    variables:
      - error_type
      - current_date
      - company_name

# ==================== 多语言支持 ====================
languages:
  zh-CN:
    system_name: "CategoryRAG智能问答系统"
    greeting: "您好！我是CategoryRAG智能助手，很高兴为您服务。"
    no_answer: "抱歉，我无法在现有文档中找到相关信息。"
    
  en-US:
    system_name: "CategoryRAG Intelligent Q&A System"
    greeting: "Hello! I'm CategoryRAG AI Assistant, happy to help you."
    no_answer: "Sorry, I couldn't find relevant information in the existing documents."

# ==================== 提示词元数据 ====================
metadata:
  version: "2.0"
  created_by: "CategoryRAG Team"
  last_updated: "2024-07-24"
  total_prompts: 12
  categories:
    - qa_generation
    - document_processing
    - topic_classification
    - keyword_extraction
    - error_handling
