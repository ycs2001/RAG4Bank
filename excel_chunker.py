"""
ExcelÂàÜÂùóÂô® - Â∞ÜExcelÊñáÊ°£ÊåâÂ∑•‰ΩúË°®ÂíåË°åÊï∞ÂàÜÂùó
"""

import logging
from pathlib import Path
from typing import List, Dict, Any

try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

logger = logging.getLogger(__name__)

class ExcelChunker:
    """ExcelÂàÜÂùóÂô® - ÊåâÂ∑•‰ΩúË°®ÂíåË°åÊï∞ÂàÜÂùó"""
    
    def __init__(self, chunk_size: int = 40, rows_per_chunk: int = None):
        """
        ÂàùÂßãÂåñExcelÂàÜÂùóÂô®

        Args:
            chunk_size: ÊØè‰∏™ÂàÜÂùóÁöÑË°åÊï∞Ôºà‰∏∫‰∫ÜÂÖºÂÆπÊÄßÔºâ
            rows_per_chunk: ÊØè‰∏™ÂàÜÂùóÁöÑË°åÊï∞Ôºà‰ºòÂÖà‰ΩøÁî®Ôºâ
        """
        # ÂÖºÂÆπ‰∏§ÁßçÂèÇÊï∞Âêç
        self.rows_per_chunk = rows_per_chunk if rows_per_chunk is not None else chunk_size
        
        if not PANDAS_AVAILABLE:
            logger.error("‚ùå pandasÊú™ÂÆâË£ÖÔºåExcelÂàÜÂùóÂäüËÉΩ‰∏çÂèØÁî®")
            raise ImportError("pandas is required for Excel chunking")
        
        logger.info(f"‚úÖ ExcelÂàÜÂùóÂô®Â∑≤ÂàùÂßãÂåñ (ÊØèÂùóË°åÊï∞: {rows_per_chunk})")
    
    def chunk_excel(self, excel_file: str, output_dir: str) -> List[str]:
        """
        ÂàÜÂùóExcelÊñáÊ°£
        
        Args:
            excel_file: ExcelÊñá‰ª∂Ë∑ØÂæÑ
            output_dir: ËæìÂá∫ÁõÆÂΩïË∑ØÂæÑ
            
        Returns:
            ÁîüÊàêÁöÑÂàÜÂùóÊñá‰ª∂Ë∑ØÂæÑÂàóË°®
        """
        input_path = Path(excel_file)
        output_path = Path(output_dir)
        
        if not input_path.exists():
            logger.error(f"‚ùå ExcelÊñá‰ª∂‰∏çÂ≠òÂú®: {excel_file}")
            return []
        
        # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
        output_path.mkdir(parents=True, exist_ok=True)
        
        try:
            # ËØªÂèñExcelÊñá‰ª∂
            excel_data = pd.ExcelFile(excel_file)
            chunk_files = []
            
            logger.info(f"üìä ÂºÄÂßãÂ§ÑÁêÜExcelÊñá‰ª∂: {input_path.name}")
            logger.info(f"üìã ÂèëÁé∞Â∑•‰ΩúË°®: {excel_data.sheet_names}")
            
            for sheet_name in excel_data.sheet_names:
                logger.info(f"üìÑ Â§ÑÁêÜÂ∑•‰ΩúË°®: {sheet_name}")
                
                # ËØªÂèñÂ∑•‰ΩúË°®Êï∞ÊçÆ
                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                
                if df.empty:
                    logger.warning(f"‚ö†Ô∏è Â∑•‰ΩúË°®‰∏∫Á©∫: {sheet_name}")
                    continue
                
                # ÂàÜÂùóÂ§ÑÁêÜ
                sheet_chunks = self._chunk_dataframe(df, sheet_name, input_path.stem, output_path)
                chunk_files.extend(sheet_chunks)
            
            logger.info(f"‚úÖ ExcelÂàÜÂùóÂÆåÊàê: {len(chunk_files)}‰∏™ÂàÜÂùó")
            return chunk_files
            
        except Exception as e:
            logger.error(f"‚ùå ExcelÂàÜÂùóÂ§±Ë¥• {excel_file}: {e}")
            return []
    
    def _chunk_dataframe(self, df: pd.DataFrame, sheet_name: str, 
                        file_stem: str, output_path: Path) -> List[str]:
        """ÂàÜÂùóDataFrameÊï∞ÊçÆ"""
        chunk_files = []
        total_rows = len(df)
        
        logger.info(f"üìä Â∑•‰ΩúË°® '{sheet_name}' ÂÖ±Êúâ {total_rows} Ë°åÊï∞ÊçÆ")
        
        # ÊåâË°åÊï∞ÂàÜÂùó
        for start_row in range(0, total_rows, self.rows_per_chunk):
            end_row = min(start_row + self.rows_per_chunk, total_rows)
            chunk_df = df.iloc[start_row:end_row]
            
            # ÁîüÊàêÂàÜÂùóÊñá‰ª∂Âêç
            chunk_filename = f"{file_stem}_{sheet_name}_rows_{start_row+1}_{end_row}.md"
            chunk_file_path = output_path / chunk_filename
            
            # ÂàõÂª∫ÂàÜÂùóÂÜÖÂÆπ
            chunk_content = self._create_chunk_content(
                file_stem, sheet_name, chunk_df, start_row+1, end_row, total_rows
            )
            
            # ‰øùÂ≠òÂàÜÂùóÊñá‰ª∂
            with open(chunk_file_path, 'w', encoding='utf-8') as f:
                f.write(chunk_content)
            
            chunk_files.append(str(chunk_file_path))
            logger.debug(f"üìù ÂàõÂª∫ÂàÜÂùó: {chunk_filename}")
        
        return chunk_files
    
    def _create_chunk_content(self, file_stem: str, sheet_name: str, 
                             chunk_df: pd.DataFrame, start_row: int, 
                             end_row: int, total_rows: int) -> str:
        """ÂàõÂª∫ÂàÜÂùóÂÜÖÂÆπ"""
        
        # ÁîüÊàêË°®Ê†ºÁöÑMarkdownÊ†ºÂºè
        try:
            # ‰ΩøÁî®pandasÁöÑto_markdownÊñπÊ≥ï
            table_markdown = chunk_df.to_markdown(index=False)
        except Exception:
            # Â¶ÇÊûúto_markdownÂ§±Ë¥•Ôºå‰ΩøÁî®ÁÆÄÂçïÁöÑË°®Ê†ºÊ†ºÂºè
            table_markdown = self._dataframe_to_simple_markdown(chunk_df)
        
        # ÂàõÂª∫ÂÆåÊï¥ÁöÑÂàÜÂùóÂÜÖÂÆπ
        content = f"""---
Ê∫êÊñá‰ª∂: {file_stem}.xlsx
Â∑•‰ΩúË°®: {sheet_name}
Ë°åËåÉÂõ¥: Á¨¨{start_row}-{end_row}Ë°å (ÂÖ±{total_rows}Ë°å)
ÂàÜÂùóID: {file_stem}_{sheet_name}_rows_{start_row}_{end_row}
ÂàóÊï∞: {len(chunk_df.columns)}
---

# {sheet_name} - Á¨¨{start_row}-{end_row}Ë°å

**Ë°®Â§¥‰ø°ÊÅØ:** {' | '.join(chunk_df.columns.astype(str))}

**Êï∞ÊçÆÂÜÖÂÆπ:**

{table_markdown}

**ÁªüËÆ°‰ø°ÊÅØ:**
- Êï∞ÊçÆË°åÊï∞: {len(chunk_df)}
- ÂàóÊï∞: {len(chunk_df.columns)}
- Êï∞ÊçÆËåÉÂõ¥: Á¨¨{start_row}-{end_row}Ë°å (ÊÄªÂÖ±{total_rows}Ë°å)
"""
        return content
    
    def _dataframe_to_simple_markdown(self, df: pd.DataFrame) -> str:
        """Â∞ÜDataFrameËΩ¨Êç¢‰∏∫ÁÆÄÂçïÁöÑMarkdownË°®Ê†º"""
        if df.empty:
            return "| Êó†Êï∞ÊçÆ |\n|--------|\n"
        
        # Ë°®Â§¥
        headers = df.columns.astype(str).tolist()
        header_row = "| " + " | ".join(headers) + " |"
        separator_row = "|" + "|".join([" --- " for _ in headers]) + "|"
        
        # Êï∞ÊçÆË°å
        data_rows = []
        for _, row in df.iterrows():
            row_data = [str(val) if pd.notna(val) else "" for val in row]
            data_row = "| " + " | ".join(row_data) + " |"
            data_rows.append(data_row)
        
        # ÁªÑÂêàË°®Ê†º
        table_lines = [header_row, separator_row] + data_rows
        return "\n".join(table_lines)
    
    def get_excel_info(self, excel_file: str) -> Dict[str, Any]:
        """Ëé∑ÂèñExcelÊñá‰ª∂‰ø°ÊÅØ"""
        try:
            excel_data = pd.ExcelFile(excel_file)
            info = {
                "file_name": Path(excel_file).name,
                "sheet_names": excel_data.sheet_names,
                "sheet_count": len(excel_data.sheet_names),
                "sheets_info": {}
            }
            
            for sheet_name in excel_data.sheet_names:
                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                info["sheets_info"][sheet_name] = {
                    "rows": len(df),
                    "columns": len(df.columns),
                    "column_names": df.columns.tolist()
                }
            
            return info
            
        except Exception as e:
            logger.error(f"‚ùå Ëé∑ÂèñExcel‰ø°ÊÅØÂ§±Ë¥•: {e}")
            return {}
